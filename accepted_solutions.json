{
  "search-in-rotated-sorted-array": "class Solution {\n    public int search(int[] arr, int target) {\n        int n = arr.length;\n        int pivot = findPivot(arr);\n        if (pivot == -1) {\n            return binarysearch(arr, 0, n - 1, target);\n        }\n        if (arr[pivot] == target) {\n            return pivot;\n        }\n        if (target >= arr[0]) {\n            return binarysearch(arr, 0, pivot - 1, target);\n        }\n        return binarysearch(arr, pivot + 1, n - 1, target);\n    }\n\n    private int findPivot(int[] arr) {\n        int l = 0, r = arr.length - 1;\n        while (l < r) {\n            int mid = l + (r - l) / 2;\n            if (arr[mid] > arr[r]) {\n                l = mid + 1;\n            } else {\n                r = mid;\n            }\n        }\n        return (l == 0) ? -1 : l - 1;\n    }\n\n    public int binarysearch(int arr[], int left, int right, int x) {\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (arr[mid] == x)\n                return mid;\n            else if (arr[mid] < x)\n                left = mid + 1;\n            else\n                right = mid - 1;\n        }\n        return -1;\n    }\n}"
}