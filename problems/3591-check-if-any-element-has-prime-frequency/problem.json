{
  "number": "3591",
  "title": "Check if Any Element Has Prime Frequency",
  "description": "<p>You are given an integer array <code>nums</code>.</p>\n\n<p>Return <code>true</code> if the frequency of any element of the array is <strong>prime</strong>, otherwise, return <code>false</code>.</p>\n\n<p>The <strong>frequency</strong> of an element <code>x</code> is the number of times it occurs in the array.</p>\n\n<p>A prime number is a natural number greater than 1 with only two factors, 1 and itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4,5,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>4 has a frequency of two, which is a prime number.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All elements have a frequency of one.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,2,2,4,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Both 2 and 4 have a prime frequency.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
  "difficulty": "Easy",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Counting",
    "Number Theory"
  ],
  "slug": "check-if-any-element-has-prime-frequency",
  "url": "https://leetcode.com/problems/check-if-any-element-has-prime-frequency/",
  "timestamp": "2025-08-07T15:03:48.373365+00:00",
  "time_complexity": "O(n^(1/2) + n)",
  "space_complexity": "O(n)"
}